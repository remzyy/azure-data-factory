{
	"name": "df_transform_hospitalization_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Raw_Hospitalization_data",
						"type": "DatasetReference"
					},
					"name": "HospitalizationSourcedata"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				},
				{
					"dataset": {
						"referenceName": "DimDate",
						"type": "DatasetReference"
					},
					"name": "DimdateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_daily_hosp_admission_processed",
						"type": "DatasetReference"
					},
					"name": "sinkdaily"
				},
				{
					"dataset": {
						"referenceName": "ds_Weekly_hosp_admission_processed",
						"type": "DatasetReference"
					},
					"name": "sinkweekly"
				}
			],
			"transformations": [
				{
					"name": "dropurlcolumn"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "selectreqcolumn"
				},
				{
					"name": "splitweeklynmonthly"
				},
				{
					"name": "DeriveYearweek"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "joinweeklydimdate"
				},
				{
					"name": "dropecdcyearweek"
				},
				{
					"name": "pivotdailyhospadmission"
				},
				{
					"name": "pivotweeklyadmission"
				},
				{
					"name": "sortdaily"
				},
				{
					"name": "sortweekly"
				},
				{
					"name": "changecolumnnames"
				},
				{
					"name": "changecolumnname"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as integer,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     maxColumns: 2000000) ~> HospitalizationSourcedata",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     maxColumns: 2000000) ~> CountryLookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimdateSource",
				"HospitalizationSourcedata select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dropurlcolumn",
				"dropurlcolumn, CountryLookup lookup(dropurlcolumn@country == CountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = dropurlcolumn@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          indicator,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectreqcolumn",
				"selectreqcolumn split(indicator == 'Daily hospital occupancy' || indicator == 'Daily ICU occupancy',",
				"     disjoint: false) ~> splitweeklynmonthly@(DailyHospitalizationdata, WeeklyHospitalizationdata)",
				"DimdateSource derive(ecdc_year_week = year + '-W' + lpad(week_of_year, 2, '0')) ~> DeriveYearweek",
				"DeriveYearweek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregate1",
				"splitweeklynmonthly@WeeklyHospitalizationdata, aggregate1 join(reported_year_week == ecdc_year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinweeklydimdate",
				"joinweeklydimdate select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          indicator,",
				"          value,",
				"          source,",
				"          week_start_date,",
				"          week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dropecdcyearweek",
				"splitweeklynmonthly@DailyHospitalizationdata pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotdailyhospadmission",
				"dropecdcyearweek pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotweeklyadmission",
				"pivotdailyhospadmission sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortdaily",
				"pivotweeklyadmission sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortweekly",
				"sortweekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date,",
				"          {hospital admissions per 100k_count} = {Weekly new hospital admissions per 100k_count},",
				"          {ICU admissions per 100k_count} = {Weekly new ICU admissions per 100k_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> changecolumnnames",
				"sortdaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          {hospital occupancy_count} = {Daily hospital occupancy_count},",
				"          {ICU occupancy_count} = {Daily ICU occupancy_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> changecolumnname",
				"changecolumnname sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkdaily",
				"changecolumnnames sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkweekly"
			]
		}
	}
}